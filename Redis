# redis 执行慢是什么原因  怎么尽可能的避免
- Redis由于是单线程执行命令，如果前面的命令比较耗时，也会影响后面的命令。比如keys *，如果Redis中存有上亿级数据，那么执行这个命令会很耗时。应尽量避免在生产环境执行这种命令。
- 如果一个key对应的value占用大量的内存（比如10M），这种key称为大key。比如：获取一个10M的string的key，或者遍历包含百万元素的hash key。
  - 查询这种大key，会占用很大的带宽，导致查询响应缓慢。同时这样的查询会使主线程长期等待，导致后续的命令阻塞。
  - 在del这样的大key也会使主线程处理速度变慢。由于占用的内存比较大，会导致释放内存的程序（内存回收器）出现全局锁，出现短暂阻塞。
  - 持久化和主从同步，比较占用CPU、内存、磁盘I/O、网络带宽等资源，导致主机资源紧张，降低主线程的处理速度。<font color="red">由于大key会占用大量内存，RDB写时复制（Copy on Write）会复制数据，导致内存占用翻番。AOF在重写文件时，数据的写入和序列化会占用大量的CPU和磁盘I/O资源</font>。
  - 对于大key，应该按照不同的维度进行拆分成小key（大对象拆分成小对象，大集合拆分成小集合）；在获取数据时，不要一次性读出所有数据；为大key设置过去时间，尽量避免Redis中长期存在大key。
- Redis中存有大量数据，持久化和主从同步数据会导致资源紧张，降低主线程的处理速度。可以增加机器，让数据分散在不同节点，这样一台Redis中的数据会变小。
- 如果key的hash冲突比较严重，会导致处理同一hash槽位的链表很长，查询很慢。
# Redis支持哪些数据类型？简单描述每种类型的使用场景
Redis有以下常用的数据类型：
## String
- 对于数字类型的K-V，可以用来做计数，使用命令incrby，如：计数器，点赞数
- 可以用来做数据缓存，提高性能。需要设置过期时间，最好将过期时间设置得比较分散，这样可以避免缓存雪崩。
## Hash
- 可用来实现分布式锁，使用lua脚本，将判断key存在和设值两个操作在同一原子操作中。使用uuid和field存储线程ID实现可重入锁，减少死锁问题。使用Redis的订阅发布来实现线程阻塞的唤醒。使用看门狗来实现key的过期时间的续期问题。
- 保存对象数据
## List

## Set
## Sorted set
## Bitmap
- 可用来做权限
- 实现用户日访问统计，比如PV、UV统计
- 实现布隆过滤器，解决缓存击穿问题。在查询Redis缓存和数据库前，先查布隆过滤器中是否存在相应数据，如果不存在，则直接返回，减少缓存和数据库的查询，减轻数据库压力。布隆过滤器能判断出数据一定不存在，不能判断数据一定存在。
# Redis是如何实现持久化的？请比较下redis持久化方式的优缺点
Redis持久化有2种：RDB和AOF
## RDB
RDB是将内存数据的一次快照写入磁盘，形成二进制文件。这样导致文件中的数据可能不是最新的。

执行RDB持久化有2个命令：save和bgsave
save命令是通过主线程执行的，这样如果数据量比较大的话，会阻塞主线程的处理，导致后续的命令不能快速处理，应该业务。bgsave是Redis通过fork操作系统子进程进行异步处理，不会阻塞主线程。

我们可以手动执行这2个命令进行数据持久化。也可以通过配置，Redis会根据配置自动进行持久化。

如果在持久化的时候，有新数据写入，那么Redis会通过写时复制（Copy on Write）技术进行持久化。

### 优点
- 文件占用小，持久化耗时短，数据恢复较快。但文件内容为二进制，人不可读。
### 缺点
- 由于持久化是某个时刻内存数据的快照，持久化文件中的数据可能不是最新，如果机器宕机，从文件中恢复，会丢失数据
## AOF
AOF有3种触发模式：有更新就进行持久化、每秒进行持久化、不持久化
AOF是将原指令持久化到磁盘中，这样会导致持久化文件比较大，重启后恢复数据比较耗时。基于此，Redis会将命令进行文件重写，持久化文件会有RDB和AOF两种格式。
### 优缺点
- 文件记录的是原命令，可读性较强，但文件占用会很大，恢复数据也比较耗时。
- 数据最多丢失1s

# 描述一下Redis发布/订阅模型的工作原理及其应用场
Redis发布订阅是基于命令subscribe/publish这2个命令来实现的。
## 应用场景
- 在redisson实现分布式锁时，释放锁的线程会发布一个消息，被阻塞的线程会监听这个消息，实现唤醒
- 消息队列，一般不会用来做消息队列，因为Redis是AP模型，可能会丢失消息
# Redis的事务是如何工作的？Redis事务与传统数据库事务有何不同？
Redis事务通过multi和exec命令来实现，multi是开启事务，exec是事务提交指令。事务开启后，所有操作的指令会进入待执行队列，只有事务提交后，这些指令才会真正执行。使用discard命令来实现事务的回滚。

### 和传统事务的区别
- Redis的事务不能读取事务中更新的数据，而传统事务是可以读取事务中更新的结果。
- Redis通过exec指令执行后才执行相应命令，这样解决了脏读问题，只能读取已提交事务的更新。
- Redis没有解决幻读问题
- Redis没有解决重复读问题
# 在高并发环境下，如何避免Redis的热点问题？
Redis热点问题是指在高并发时，单节点Redis负载过高的问题。比如秒杀系统，频繁扣减商品库存，社交平台热点话题的实时点赞和阅读统计。

我们可以将Redis部署为sentinel模式，将售卖商品库存分为几个部分，放在不同的master节点，将根据用户id来做hash分片，对应到不同的Redis节点。假如库存有15000，3个master节点，3个节点有5000的库存，3个节点的hash槽分别对应0-5000，5001-10000，10001-15000。不同的用户会根据其用户id，使用hash(用户id) & 16384，将流量分散到3个节点上。比如用户id为zhangsan，hash值为3001，那么就去操作node1，用户id为lisi，hash值为6999，就去操作node2。
# 请描述一种使用Redis实现分布式锁的方法。
# 如何使用Redis构 建一个高效的排行榜系统？
# Redis适合做全文搜索吗？请说明理由
# 什么是Redis管道(pipelining)？如何通过管道提高性能？
# Redis的内存管理机制是什么？介绍几种常用的内存淘汰策略。
# Redisson锁有哪些优点? 
# Redis有哪些常用的数据结构?除了使用Redis锁还有哪些
# 缓存穿透，缓存雪崩是什么?
# redis的服务器端是单线程还是多线程？为什么？
# redis同步到数据库，为什么用延迟双删，怎么保证一致性
# 说一下Redis的锁
# 面试官：除了setnx呢，要是加锁失败了呢，你还知道哪些？
# 你知道tryLock()底层的Lua脚本是怎么样实现的吗？
# 知道Redis有哪些淘汰策略吗？
# 了解它支持哪些数据类型吗？
# 了解缓存穿透和击穿吗？说一下怎么解决。
# 数据结构跳表



